From d165e5cab156a7cd173963394cdf9268a6610095 Mon Sep 17 00:00:00 2001
From: Jacek Jendrzej <crashdvb@googlemail.com>
Date: Fri, 24 Apr 2015 18:13:41 +0200
Subject: [PATCH] switch HDS to roxml

Signed-off-by: Jacek Jendrzej <crashdvb@googlemail.com>
---
 configure                 |  11 ++---
 libavformat/f4mmanifest.c | 110 ++++++++++++++++++++++------------------------
 2 files changed, 56 insertions(+), 65 deletions(-)

diff --git a/configure b/configure
index 61bb8f5..7f4089b 100755
--- a/configure
+++ b/configure
@@ -260,7 +260,7 @@ External library support:
   --enable-x11grab         enable X11 grabbing [no]
   --disable-xlib           disable xlib [autodetect]
   --disable-zlib           disable zlib [autodetect]
-  --disable-xml2           disable XML parsing using the C library libxml2 [autodetect]
+  --disable-libroxml       disable XML parsing using the C library libroxml [autodetect]
 
 Toolchain options:
   --arch=ARCH              select architecture [$arch]
@@ -1381,7 +1381,7 @@ EXTERNAL_LIBRARY_LIST="
     openssl
     x11grab
     xlib
-    xml2
+    libroxml
     zlib
 "
 
@@ -2369,7 +2369,7 @@ dxa_demuxer_select="riffdec"
 eac3_demuxer_select="ac3_parser"
 f4v_muxer_select="mov_muxer"
 flac_demuxer_select="flac_parser"
-hds_demuxer_select="xml2"
+hds_demuxer_select="libroxml"
 hds_muxer_select="flv_muxer"
 hls_muxer_select="mpegts_muxer"
 image2_alias_pix_demuxer_select="image2_demuxer"
@@ -4697,10 +4697,7 @@ fi
 disabled  zlib || check_lib   zlib.h      zlibVersion -lz   || disable  zlib
 disabled bzlib || check_lib2 bzlib.h BZ2_bzlibVersion -lbz2 || disable bzlib
 
-disabled xml2 || {
-    check_pkg_config libxml-2.0 libxml2/libxml/xmlversion.h xmlCheckVersion &&
-    require_pkg_config libxml-2.0 libxml2/libxml/xmlversion.h xmlCheckVersion
-    } || disable xml2
+disabled libroxml || check_lib roxml.h roxml_load_buf -lroxml || disable libroxml
 
 check_lib math.h sin -lm && LIBM="-lm"
 disabled crystalhd || check_lib libcrystalhd/libcrystalhd_if.h DtsCrystalHDVersion -lcrystalhd || disable crystalhd
diff --git a/libavformat/f4mmanifest.c b/libavformat/f4mmanifest.c
index f98896c..b33247b 100644
--- a/libavformat/f4mmanifest.c
+++ b/libavformat/f4mmanifest.c
@@ -29,34 +29,34 @@
 #include "f4mmanifest.h"
 #include "libavutil/avstring.h"
 #include "libavutil/base64.h"
-#include <libxml/parser.h>
-#include <libxml/tree.h>
+#include <roxml.h>
 
-static int f4m_parse_bootstrap_info_node(xmlNodePtr node, F4MBootstrapInfo *bootstrap_info)
+static int f4m_parse_bootstrap_info_node(node_t * node, F4MBootstrapInfo *bootstrap_info)
 {
-    xmlChar *p;
+    const char  *p;
     uint8_t *dst;
     int ret;
+    node_t *attr;
 
-    p = xmlGetProp(node, "id");
+    attr = roxml_get_attr(node, "id", 0);
+    p =roxml_get_content(attr,NULL,0,NULL);
     if(p) {
         av_strlcpy(bootstrap_info->id, p, sizeof(bootstrap_info->id));
-        xmlFree(p);
     }
 
-    p = xmlGetProp(node, "url");
+    attr = roxml_get_attr(node, "url", 0);
+    p =roxml_get_content(attr,NULL,0,NULL);
     if(p) {
         av_strlcpy(bootstrap_info->url, p, sizeof(bootstrap_info->url));
-        xmlFree(p);
     }
 
-    p = xmlGetProp(node, "profile");
+    attr = roxml_get_attr(node, "profile", 0);
+    p =roxml_get_content(attr,NULL,0,NULL);
     if(p) {
         av_strlcpy(bootstrap_info->profile, p, sizeof(bootstrap_info->profile));
-        xmlFree(p);
     }
 
-    p = xmlNodeGetContent(node);
+    p = roxml_get_content(node, NULL, 0, NULL);
     if(p) {
         dst = av_mallocz(sizeof(uint8_t)*strlen(p));
         if(!dst)
@@ -64,7 +64,6 @@ static int f4m_parse_bootstrap_info_node(xmlNodePtr node, F4MBootstrapInfo *boot
 
         if((ret = av_base64_decode(dst, p, strlen(p))) < 0) {
             av_log(NULL, AV_LOG_ERROR, "f4mmanifest Failed to decode bootstrap node base64 metadata, ret: %d \n", ret);
-            xmlFree(p);
             av_free(dst);
             return ret;
         }
@@ -76,29 +75,25 @@ static int f4m_parse_bootstrap_info_node(xmlNodePtr node, F4MBootstrapInfo *boot
         bootstrap_info->metadata_size = ret;
         memcpy(bootstrap_info->metadata, dst, ret);
 
-        xmlFree(p);
         av_free(dst);
     }
 
     return 0;
 }
 
-static int f4m_parse_metadata_node(xmlNodePtr node, F4MMedia *media)
+static int f4m_parse_metadata_node(node_t * node, F4MMedia *media)
 {
-    xmlNodePtr metadata_node;
-    xmlChar *p;
+    const char  *p = NULL;
     uint8_t *dst;
     int ret;
 
-    p = NULL;
-    metadata_node = node->children;
+    node_t * metadata_node = roxml_get_chld(node, NULL, 0);
     while(metadata_node) {
-        if(!strcmp(metadata_node->name, "metadata")) {
-            p = xmlNodeGetContent(metadata_node);
+        if(!strcmp(roxml_get_name(metadata_node, NULL, 0), "metadata")) {
+            p = roxml_get_content(metadata_node, NULL, 0, NULL);
             break;
         }
-
-        metadata_node = metadata_node->next;
+        metadata_node = roxml_get_next_sibling(metadata_node);
     }
 
     if(!p)
@@ -110,7 +105,6 @@ static int f4m_parse_metadata_node(xmlNodePtr node, F4MMedia *media)
 
     if((ret = av_base64_decode(dst, p, strlen(p))) < 0) {
         av_log(NULL, AV_LOG_ERROR, "f4mmanifest Failed to decode base64 metadata, ret: %d \n", ret);
-        xmlFree(p);
         av_free(dst);
         return ret;
     }
@@ -122,33 +116,33 @@ static int f4m_parse_metadata_node(xmlNodePtr node, F4MMedia *media)
     media->metadata_size = ret;
     memcpy(media->metadata, dst, ret);
 
-    xmlFree(p);
     av_free(dst);
 
     return 0;
 }
 
-static int f4m_parse_media_node(xmlNodePtr node, F4MMedia *media)
+static int f4m_parse_media_node(node_t * node, F4MMedia *media)
 {
-    xmlChar *p;
+    const char  *p;
     int ret;
+    node_t * attr;
 
-    p = xmlGetProp(node, "bitrate");
+    attr = roxml_get_attr(node, "bitrate", 0);
+    p =roxml_get_content(attr,NULL,0,NULL);
     if(p) {
         media->bitrate = strtoul(p, NULL, 10);
-        xmlFree(p);
     }
 
-    p = xmlGetProp(node, "url");
+    attr = roxml_get_attr(node, "url", 0);
+    p =roxml_get_content(attr,NULL,0,NULL);
     if(p) {
         av_strlcpy(media->url, p, sizeof(media->url));
-        xmlFree(p);
     }
 
-    p = xmlGetProp(node, "bootstrapInfoId");
+    attr = roxml_get_attr(node, "bootstrapInfoId", 0);
+    p =roxml_get_content(attr,NULL,0,NULL);
     if(p) {
         av_strlcpy(media->bootstrap_info_id, p, sizeof(media->bootstrap_info_id));
-        xmlFree(p);
     }
 
     if((ret = f4m_parse_metadata_node(node, media)) < 0) {
@@ -158,44 +152,43 @@ static int f4m_parse_media_node(xmlNodePtr node, F4MMedia *media)
     return 0;
 }
 
-static int f4m_parse_manifest_node(xmlNodePtr root_node, F4MManifest *manifest)
+static int f4m_parse_manifest_node(node_t * root_node, F4MManifest *manifest)
 {
     F4MBootstrapInfo *bootstrap_info;
     F4MMedia *media;
-    xmlNodePtr node;
-    xmlChar *node_content;
-    int ret = 0;
-
-    for(node = root_node->children; node != root_node->last; node = node->next) {
-
-        if(!strcmp(node->name, "text"))
+    node_t * node;
+    const char  *node_content;
+    int ret = 0,chld_idx=0;
+
+    for (chld_idx=0; chld_idx<roxml_get_chld_nb(root_node); chld_idx++){
+	node = roxml_get_chld(root_node, NULL, chld_idx);
+	const char * node_name = roxml_get_name(node, NULL, 0);
+        if(!strcmp(node_name, "text"))
             continue;
 
-        node_content = xmlNodeGetContent(node);
+	node_content = roxml_get_content(node, NULL, 0, NULL);
 
-        if(!strcmp(node->name, "id") && node_content) {
+        if(!strcmp(node_name, "id") && node_content) {
             av_strlcpy(manifest->id, node_content, sizeof(manifest->id));
-        } else if(!strcmp(node->name, "streamType") && node_content) {
+        } else if(!strcmp(node_name, "streamType") && node_content) {
             av_strlcpy(manifest->stream_type, node_content, sizeof(manifest->stream_type));
-        } else if(!strcmp(node->name, "bootstrapInfo")) {
+        } else if(!strcmp(node_name, "bootstrapInfo")) {
             bootstrap_info = av_mallocz(sizeof(F4MBootstrapInfo));
             if(!bootstrap_info)
                 return AVERROR(ENOMEM);
             manifest->bootstraps[manifest->nb_bootstraps++] = bootstrap_info;
             ret = f4m_parse_bootstrap_info_node(node, bootstrap_info);
-        } else if(!strcmp(node->name, "media")) {
+        } else if(!strcmp(node_name, "media")) {
             media = av_mallocz(sizeof(F4MMedia));
             if(!media)
                 return AVERROR(ENOMEM);
             manifest->media[manifest->nb_media++] = media;
             ret = f4m_parse_media_node(node, media);
-        } else if (!strcmp(node->name, "duration")) {
+        } else if (!strcmp(node_name, "duration")) {
 	    double duration = strtod(node_content, NULL);
 	    manifest->duration = duration * AV_TIME_BASE;
 	}
 
-        if(node_content)
-            xmlFree(node_content);
         if(ret < 0)
             return ret;
     }
@@ -205,30 +198,31 @@ static int f4m_parse_manifest_node(xmlNodePtr root_node, F4MManifest *manifest)
 
 static int f4m_parse_xml_file(uint8_t *buffer, int size, F4MManifest *manifest)
 {
-    xmlDocPtr doc;
-    xmlNodePtr root_node;
+    node_t * doc;
+    node_t * root_node;
     int ret;
 
-    doc = xmlReadMemory(buffer, size, "noname.xml", NULL, 0);
+    doc = roxml_load_buf(buffer);
     if(!doc) {
         return -1;
     }
 
-    root_node = xmlDocGetRootElement(doc);
+    doc = roxml_get_root(doc);
+    root_node = roxml_get_chld(doc, NULL, 0);
     if(!root_node) {
         av_log(NULL, AV_LOG_ERROR, "f4mmanifest Root element not found \n");
-        xmlFreeDoc(doc);
+        roxml_close(doc);
         return -1;
     }
-
-    if(strcmp(root_node->name, "manifest")) {
-        av_log(NULL, AV_LOG_ERROR, "f4mmanifest Root element is not named manifest, name = %s \n", root_node->name);
-        xmlFreeDoc(doc);
+    const char * root_node_name = roxml_get_name(root_node, NULL, 0);
+    if(strcmp(root_node_name, "manifest")) {
+        av_log(NULL, AV_LOG_ERROR, "f4mmanifest Root element is not named manifest, name = %s \n", root_node_name);
+        roxml_close(doc);
         return -1;
     }
 
     ret = f4m_parse_manifest_node(root_node, manifest);
-    xmlFreeDoc(doc);
+    roxml_close(doc);
 
     return ret;
 }
-- 
2.3.6

