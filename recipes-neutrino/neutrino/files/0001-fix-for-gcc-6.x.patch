From f545c737eeb2463db0381840168a0054bc17a435 Mon Sep 17 00:00:00 2001
From: flk <f_l_k@t-online.de>
Date: Sat, 21 May 2016 12:23:55 +0200
Subject: [PATCH] 0001-fix-for-gcc-6.x-V3.patch

Signed-off-by: flk <f_l_k@t-online.de>
---
 src/driver/audiodec/ffmpegdec.cpp    |  4 ++++
 src/driver/pictureviewer/crw.cpp     | 18 +++++++++++++++---
 src/driver/pictureviewer/jpeg.cpp    | 20 ++++++++++++++++----
 src/gui/sleeptimer.cpp               | 36 ++++++++++++++++++++++++++++++------
 src/gui/tmdb.cpp                     | 18 +++++++++++++++++-
 src/system/helpers.cpp               |  2 ++
 src/system/helpers.h                 |  2 ++
 src/system/mtdutils/compr.cpp        |  8 +++++++-
 src/system/mtdutils/compr_zlib.cpp   |  7 +++++++
 src/system/mtdutils/include/common.h |  4 +++-
 src/system/mtdutils/mkfs.jffs2.cpp   | 14 +++++++++++++-
 src/system/mtdutils/rbtree.h         |  6 ++++++
 src/system/ytcache.cpp               |  8 ++++++++
 13 files changed, 130 insertions(+), 17 deletions(-)

diff --git a/src/driver/audiodec/ffmpegdec.cpp b/src/driver/audiodec/ffmpegdec.cpp
index a4eb905..d399735 100644
--- a/src/driver/audiodec/ffmpegdec.cpp
+++ b/src/driver/audiodec/ffmpegdec.cpp
@@ -475,7 +475,11 @@ bool CFfmpegDec::SetMetaData(FILE *_in, CAudioMetaData* m, bool save_cover)
 			if (save_cover && (avc->streams[i]->disposition & AV_DISPOSITION_ATTACHED_PIC)) {
 				mkdir(COVERDIR, 0755);
 				std::string cover(COVERDIR);
+#if __cplusplus < 201103
 				cover += "/" + to_string(cover_count++) + ".jpg";
+#else
+				cover += "/" + std::to_string(cover_count++) + ".jpg";
+#endif
 				FILE *f = fopen(cover.c_str(), "wb");
 				if (f) {
 					AVPacket *pkt = &avc->streams[i]->attached_pic;
diff --git a/src/driver/pictureviewer/crw.cpp b/src/driver/pictureviewer/crw.cpp
index 83a0c05..9589dd6 100644
--- a/src/driver/pictureviewer/crw.cpp
+++ b/src/driver/pictureviewer/crw.cpp
@@ -9,6 +9,9 @@
 #include <fcntl.h>
 #include <unistd.h>
 
+#if __cplusplus >= 201103
+#include <cmath>
+#endif
 #include <setjmp.h>
 #include "pictureviewer.h"
 
@@ -193,12 +196,21 @@ int fh_crw_load(const char *filename,unsigned char **buffer,int* xp,int* /*yp*/)
 	ciptr->out_color_space=JCS_RGB;
 	if(x==(int)ciptr->image_width)
 		ciptr->scale_denom=1;
-	else if(abs(x*2 - ciptr->image_width) < 2)
+#if __cplusplus < 201103
+ 	else if(abs(x*2 - ciptr->image_width) < 2)
+ 		ciptr->scale_denom=2;
+ 	else if(abs(x*4 - ciptr->image_width) < 4)
+ 		ciptr->scale_denom=4;
+ 	else if(abs(x*8 - ciptr->image_width) < 8)
+		ciptr->scale_denom=8;
+#else
+	else if(std::abs(x*2 - ciptr->image_width) < 2)
 		ciptr->scale_denom=2;
-	else if(abs(x*4 - ciptr->image_width) < 4)
+	else if(std::abs(x*4 - ciptr->image_width) < 4)
 		ciptr->scale_denom=4;
-	else if(abs(x*8 - ciptr->image_width) < 8)
+	else if(std::abs(x*8 - ciptr->image_width) < 8)
 		ciptr->scale_denom=8;
+#endif
 	else
 		ciptr->scale_denom=1;
 
diff --git a/src/driver/pictureviewer/jpeg.cpp b/src/driver/pictureviewer/jpeg.cpp
index 3d3898f..d6d0eb4 100644
--- a/src/driver/pictureviewer/jpeg.cpp
+++ b/src/driver/pictureviewer/jpeg.cpp
@@ -17,7 +17,10 @@
 #include <arpa/inet.h>
 #include <sys/types.h>
 #include <sys/socket.h>
-	
+
+#if __cplusplus >= 201103
+#include <cmath>
+#endif	
 #include <setjmp.h>
 
 #include <global.h>
@@ -94,12 +97,21 @@ int fh_jpeg_load(const char *filename,unsigned char **buffer,int* x,int* y)
 	ciptr->dct_method=JDCT_FASTEST;
 	if(*x==(int)ciptr->image_width)
 		ciptr->scale_denom=1;
-	else if(abs(*x*2 - ciptr->image_width) < 2)
+#if __cplusplus < 201103
+ 	else if(abs(*x*2 - ciptr->image_width) < 2)
+ 		ciptr->scale_denom=2;
+ 	else if(abs(*x*4 - ciptr->image_width) < 4)
+ 		ciptr->scale_denom=4;
+ 	else if(abs(*x*8 - ciptr->image_width) < 8)
+		ciptr->scale_denom=8;
+#else
+	else if(std::abs(*x*2 - ciptr->image_width) < 2)
 		ciptr->scale_denom=2;
-	else if(abs(*x*4 - ciptr->image_width) < 4)
+	else if(std::abs(*x*4 - ciptr->image_width) < 4)
 		ciptr->scale_denom=4;
-	else if(abs(*x*8 - ciptr->image_width) < 8)
+	else if(std::abs(*x*8 - ciptr->image_width) < 8)
 		ciptr->scale_denom=8;
+#endif
 	else
 		ciptr->scale_denom=1;
 
diff --git a/src/gui/sleeptimer.cpp b/src/gui/sleeptimer.cpp
index 28000e5..5587f1c 100644
--- a/src/gui/sleeptimer.cpp
+++ b/src/gui/sleeptimer.cpp
@@ -62,13 +62,21 @@ int CSleepTimerWidget::exec(CMenuTarget* parent, const std::string &/*actionKey*
 		parent->hide();
 
 	if(permanent) {
-		value = to_string(g_settings.shutdown_min);
+#if __cplusplus < 201103
+ 		value = to_string(g_settings.shutdown_min);
+#else
+		value = std::to_string(g_settings.shutdown_min);
+#endif
 		if (value.length() < 3)
 			value.insert(0, 3 - value.length(), '0');
 		inbox = new CStringInput(LOCALE_SLEEPTIMERBOX_TITLE2, &value, 3, LOCALE_SLEEPTIMERBOX_HINT1, LOCALE_SLEEPTIMERBOX_HINT3, "0123456789 ");
 	} else {
 		shutdown_min = g_Timerd->getSleepTimerRemaining();  // remaining shutdown time?
-		value = to_string(shutdown_min);
+#if __cplusplus < 201103
+ 		value = to_string(shutdown_min);
+#else
+		value = std::to_string(shutdown_min);
+#endif
 		if (g_settings.sleeptimer_min == 0) {
 			CSectionsdClient::CurrentNextInfo info_CurrentNext;
 			g_InfoViewer->getEPG(g_RemoteControl->current_channel_id, info_CurrentNext);
@@ -77,11 +85,19 @@ int CSleepTimerWidget::exec(CMenuTarget* parent, const std::string &/*actionKey*
 				int current_epg_zeit_dauer_rest = (info_CurrentNext.current_zeit.dauer+150 - (jetzt - info_CurrentNext.current_zeit.startzeit ))/60 ;
 				if(shutdown_min == 0 && current_epg_zeit_dauer_rest > 0 && current_epg_zeit_dauer_rest < 1000)
 				{
-					value = to_string(current_epg_zeit_dauer_rest);
+#if __cplusplus < 201103
+ 					value = to_string(current_epg_zeit_dauer_rest);
+#else
+					value = std::to_string(current_epg_zeit_dauer_rest);
+#endif
 				}
 			}
 		} else {
-			value = to_string(g_settings.sleeptimer_min);
+#if __cplusplus < 201103
+ 			value = to_string(g_settings.sleeptimer_min);
+#else
+			value = std::to_string(g_settings.sleeptimer_min);
+#endif
 		}
 		if (value.length() < 3)
 			value.insert(0, 3 - value.length(), '0');
@@ -128,10 +144,18 @@ int CSleepTimerWidget::exec(CMenuTarget* parent, const std::string &/*actionKey*
 std::string &CSleepTimerWidget::getValue(void)
 {
 	if (permanent) {
-		valueStringTmp = (g_settings.shutdown_min > 0) ? to_string(g_settings.shutdown_min) + " " + g_Locale->getText(LOCALE_UNIT_SHORT_MINUTE) : "";
+#if __cplusplus < 201103
+ 		valueStringTmp = (g_settings.shutdown_min > 0) ? to_string(g_settings.shutdown_min) + " " + g_Locale->getText(LOCALE_UNIT_SHORT_MINUTE) : "";
+#else
+		valueStringTmp = (g_settings.shutdown_min > 0) ? std::to_string(g_settings.shutdown_min) + " " + g_Locale->getText(LOCALE_UNIT_SHORT_MINUTE) : "";
+#endif
 	} else {
 		int remaining = g_Timerd->getSleepTimerRemaining();
-		valueStringTmp = (remaining > 0) ? to_string(remaining) + " " + g_Locale->getText(LOCALE_UNIT_SHORT_MINUTE) : "";
+#if __cplusplus < 201103
+ 		valueStringTmp = (remaining > 0) ? to_string(remaining) + " " + g_Locale->getText(LOCALE_UNIT_SHORT_MINUTE) : "";
+#else
+		valueStringTmp = (remaining > 0) ? std::to_string(remaining) + " " + g_Locale->getText(LOCALE_UNIT_SHORT_MINUTE) : "";
+#endif
 	}
 	return valueStringTmp;
 }
diff --git a/src/gui/tmdb.cpp b/src/gui/tmdb.cpp
index f295d2d..c06583e 100644
--- a/src/gui/tmdb.cpp
+++ b/src/gui/tmdb.cpp
@@ -230,7 +230,11 @@ bool cTmdb::GetMovieDetails(std::string lang)
 		minfo.id = elements[0].get("id",-1).asInt();
 		minfo.media_type = elements[0].get("media_type","").asString();
 		if (minfo.id > -1) {
+#if __cplusplus < 201103
 			url = "http://api.themoviedb.org/3/"+minfo.media_type+"/"+to_string(minfo.id)+"?api_key="+key+"&language="+lang+"&append_to_response=credits";
+#else
+			url = "http://api.themoviedb.org/3/"+minfo.media_type+"/"+std::to_string(minfo.id)+"?api_key="+key+"&language="+lang+"&append_to_response=credits";
+#endif
 			answer.clear();
 			if (!getUrl(url, answer))
 				return false;
@@ -289,19 +293,31 @@ std::string cTmdb::CreateEPGText()
 {
 	std::string epgtext;
 	epgtext += "\n";
+#if __cplusplus < 201103
 	epgtext += "Vote: "+minfo.vote_average.substr(0,3)+"/10 Votecount: "+to_string(minfo.vote_count)+"\n";
+#else
+	epgtext += "Vote: "+minfo.vote_average.substr(0,3)+"/10 Votecount: "+std::to_string(minfo.vote_count)+"\n";
+#endif
 	epgtext += "\n";
 	epgtext += minfo.overview+"\n";
 	epgtext += "\n";
 	if (minfo.media_type == "tv")
 		epgtext += (std::string)g_Locale->getText(LOCALE_EPGVIEWER_LENGTH)+": "+minfo.runtimes+"\n";
 	else
+#if __cplusplus < 201103
 		epgtext += (std::string)g_Locale->getText(LOCALE_EPGVIEWER_LENGTH)+": "+to_string(minfo.runtime)+"\n";
+#else
+		epgtext += (std::string)g_Locale->getText(LOCALE_EPGVIEWER_LENGTH)+": "+std::to_string(minfo.runtime)+"\n";
+#endif
 	epgtext += (std::string)g_Locale->getText(LOCALE_EPGVIEWER_GENRE)+": "+minfo.genres+"\n";
 	epgtext += (std::string)g_Locale->getText(LOCALE_EPGEXTENDED_ORIGINAL_TITLE) +" : "+ minfo.original_title+"\n";
 	epgtext += (std::string)g_Locale->getText(LOCALE_EPGEXTENDED_YEAR_OF_PRODUCTION)+" : "+ minfo.release_date.substr(0,4) +"\n";
 	if (minfo.media_type == "tv")
-		epgtext += "Seasons/Episodes: "+to_string(minfo.seasons)+"/"+to_string(minfo.episodes)+"\n";
+#if __cplusplus < 201103
+		epgtext += "Seasons/Episodes: "+to_string(minfo.seasons)+"/"+to_string(minfo.episodes)+"\n";
+#else
+		epgtext += "Seasons/Episodes: "+std::to_string(minfo.seasons)+"/"+std::to_string(minfo.episodes)+"\n";
+#endif
 	if (!minfo.cast.empty())
 		epgtext += (std::string)g_Locale->getText(LOCALE_EPGEXTENDED_ACTORS)+":\n"+ minfo.cast+"\n";
 	return epgtext;
diff --git a/src/system/helpers.cpp b/src/system/helpers.cpp
index 70dd118..e4d5197 100644
--- a/src/system/helpers.cpp
+++ b/src/system/helpers.cpp
@@ -884,6 +884,7 @@ std::vector<std::string> split(const std::string &s, char delim)
 	return vec;
 }
 
+#if __cplusplus < 201103
 std::string to_string(int i)
 {
 	std::stringstream s;
@@ -925,6 +926,7 @@ std::string to_string(unsigned long long i)
 	s << i;
 	return s.str();
 }
+#endif
 
 std::string getJFFS2MountPoint(int mtdPos)
 {
diff --git a/src/system/helpers.h b/src/system/helpers.h
index 486d1e8..869edbe 100644
--- a/src/system/helpers.h
+++ b/src/system/helpers.h
@@ -97,12 +97,14 @@ class CFileHelpers
 
 uint32_t GetWidth4FB_HW_ACC(const uint32_t _x, const uint32_t _w, const bool max=true);
 
+#if __cplusplus < 201103
 std::string to_string(int);
 std::string to_string(unsigned int);
 std::string to_string(long);
 std::string to_string(unsigned long);
 std::string to_string(long long);
 std::string to_string(unsigned long long);
+#endif
 
 inline int atoi(std::string &s) { return atoi(s.c_str()); }
 inline int atoi(const std::string &s) { return atoi(s.c_str()); }
diff --git a/src/system/mtdutils/compr.cpp b/src/system/mtdutils/compr.cpp
index 898d550..b1e0d9f 100644
--- a/src/system/mtdutils/compr.cpp
+++ b/src/system/mtdutils/compr.cpp
@@ -60,11 +60,17 @@ static inline void list_del(struct list_head *entry)
 #define list_entry(ptr, type, member) \
 	((type *)((char *)(ptr)-(unsigned long)(&((type *)0)->member)))
 
+#if __cplusplus < 201103
 #define list_for_each_entry(pos, head, member)                          \
 	for (pos = list_entry((head)->next, typeof(*pos), member);      \
 			&pos->member != (head);                                    \
 			pos = list_entry(pos->member.next, typeof(*pos), member))
-
+#else
+#define list_for_each_entry(pos, head, member)                          \
+	for (pos = list_entry((head)->next, __typeof__(*pos), member);      \
+			&pos->member != (head);                                    \
+			pos = list_entry(pos->member.next, __typeof__(*pos), member))
+#endif
 
 /* Available compressors are on this_ list */
 static LIST_HEAD(jffs2_compressor_list);
diff --git a/src/system/mtdutils/compr_zlib.cpp b/src/system/mtdutils/compr_zlib.cpp
index 717053f..0f9598e 100644
--- a/src/system/mtdutils/compr_zlib.cpp
+++ b/src/system/mtdutils/compr_zlib.cpp
@@ -44,6 +44,9 @@
 #include "common.h"
 #include "compr.h"
 
+#if __cplusplus >= 201103
+#include "algorithm"
+#endif
 /* Plan: call deflate() with avail_in == *sourcelen,
    avail_out = *dstlen - 12 and flush == Z_FINISH.
    If it doesn't manage to finish,	call it again with
@@ -76,7 +79,11 @@ static int jffs2_zlib_compress(unsigned char *data_in, unsigned char *cpage_out,
 
 	while (strm.total_out < *dstlen - STREAM_END_SPACE && strm.total_in < *sourcelen) {
 		strm.avail_out = *dstlen - (strm.total_out + STREAM_END_SPACE);
+#if __cplusplus < 201103
 		strm.avail_in = min((unsigned)(*sourcelen-strm.total_in), strm.avail_out);
+#else
+		strm.avail_in = std::min((unsigned)(*sourcelen-strm.total_in), strm.avail_out);
+#endif
 		ret = deflate(&strm, Z_PARTIAL_FLUSH);
 		if (ret != Z_OK) {
 			deflateEnd(&strm);
diff --git a/src/system/mtdutils/include/common.h b/src/system/mtdutils/include/common.h
index d70f49b..1825ebc 100644
--- a/src/system/mtdutils/include/common.h
+++ b/src/system/mtdutils/include/common.h
@@ -37,13 +37,15 @@
 extern "C" {
 #endif
 
-#ifndef MIN	/* some C lib headers define this for us */
+#if __cplusplus < 201103
+#ifndef MIN 	/* some C lib headers define this for us */
 #define MIN(a, b) ((a) < (b) ? (a) : (b))
 #endif
 #ifndef MAX
 #define MAX(a, b) ((a) > (b) ? (a) : (b))
 #endif
 #define min(a, b) MIN(a, b) /* glue for linux kernel source */
+#endif
 #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
 
 #ifndef O_CLOEXEC
diff --git a/src/system/mtdutils/mkfs.jffs2.cpp b/src/system/mtdutils/mkfs.jffs2.cpp
index 762e44f..e72c1ba 100644
--- a/src/system/mtdutils/mkfs.jffs2.cpp
+++ b/src/system/mtdutils/mkfs.jffs2.cpp
@@ -66,6 +66,9 @@
 #include <crc32.h>
 #include <inttypes.h>
 
+#if __cplusplus >= 201103
+#include <algorithm>
+#endif
 #include <string>
 
 #include "rbtree.h"
@@ -755,7 +758,11 @@ void CMkfsJFFS2::pad_block_if_less_than(int req)
 void CMkfsJFFS2::padblock(void)
 {
 	while (out_ofs % erase_block_size) {
+#if __cplusplus < 201103
 		full_write(out_fd, ffbuf, min(sizeof(ffbuf),
+#else
+		full_write(out_fd, ffbuf, std::min(sizeof(ffbuf),
+#endif
 					      (size_t)(erase_block_size - (out_ofs % erase_block_size))));
 	}
 }
@@ -868,7 +875,12 @@ void CMkfsJFFS2::create_target_filesystem(struct filesystem_entry *root)
 			}
 		} else {
 			while (out_ofs < pad_fs_size) {
-				full_write(out_fd, ffbuf, min(sizeof(ffbuf), (size_t)(pad_fs_size - out_ofs)));
+#if __cplusplus < 201103
+				full_write(out_fd, ffbuf, min(sizeof(ffbuf), (size_t)(pad_fs_size - out_ofs)));
+#else
+				full_write(out_fd, ffbuf, std::min(sizeof(ffbuf), (size_t)(pad_fs_size - out_ofs)));
+#endif
+				
 			}
 
 		}
diff --git a/src/system/mtdutils/rbtree.h b/src/system/mtdutils/rbtree.h
index 0c5345b..6843832 100644
--- a/src/system/mtdutils/rbtree.h
+++ b/src/system/mtdutils/rbtree.h
@@ -136,9 +136,15 @@ static inline void rb_set_color(struct rb_node *rb, int color)
 #define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)
 #endif
 
+#if __cplusplus < 201103
 #define container_of(ptr, type, member) ({                      \
         const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
         (type *)( (char *)__mptr - offsetof(type,member) );})
+#else
+#define container_of(ptr, type, member) ({                      \
+        const __typeof__( ((type *)0)->member ) *__mptr = (ptr);    \
+        (type *)( (char *)__mptr - offsetof(type,member) );})
+#endif
 
 #define	rb_entry(ptr, type, member) container_of(ptr, type, member)
 
diff --git a/src/system/ytcache.cpp b/src/system/ytcache.cpp
index 64dcb66..bd82d16 100644
--- a/src/system/ytcache.cpp
+++ b/src/system/ytcache.cpp
@@ -66,7 +66,11 @@ std::string cYTCache::getName(MI_MOVIE_INFO *mi, std::string ext)
 {
 	switch (mi->source) {
 		case MI_MOVIE_INFO::YT:
+#if __cplusplus < 201103
 			return g_settings.downloadcache_dir + "/" + mi->ytid + "-" + to_string(mi->ytitag) + "." + ext;
+#else
+			return g_settings.downloadcache_dir + "/" + mi->ytid + "-" + std::to_string(mi->ytitag) + "." + ext;
+#endif
 		case MI_MOVIE_INFO::NK:
 			return g_settings.downloadcache_dir + "/nk-" + mi->ytid + "." + ext;
 		default:
@@ -76,7 +80,11 @@ std::string cYTCache::getName(MI_MOVIE_INFO *mi, std::string ext)
 
 bool cYTCache::getNameIfExists(std::string &fname, const std::string &id, int itag, std::string ext)
 {
+#if __cplusplus < 201103
 	std::string f = g_settings.downloadcache_dir + "/" + id + "-" + to_string(itag) + "." + ext;
+#else
+	std::string f = g_settings.downloadcache_dir + "/" + id + "-" + std::to_string(itag) + "." + ext;
+#endif
 	if (access(f, R_OK))
 		return false;
 	fname = f;
-- 
2.1.4

